"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import axios from "axios";
import MemoInput from "./MemoInput";
import MusicList from "./MusicList";
import MusicSearch from "./MusicSearch";
import "./style.css";
import { AlertComponent } from "@/components/alert";
import { Card } from "@/components/ui/card";

export default function CalendarRecordPage() {
  const API_URL = "http://localhost:8080/api/v1";

  const router = useRouter();
  const searchParams = useSearchParams();

  const id = searchParams.get("id");
  const year = searchParams.get("year");
  const month = searchParams.get("month");
  const day = searchParams.get("day");

  const [memo, setMemo] = useState("");
  const [selectedTracks, setSelectedTracks] = useState<any[]>([]);
  const [isEditing, setIsEditing] = useState(false);

  const [alertData, setAlertData] = useState<{
    title: string;
    description: string;
    variant: "default" | "success" | "warning" | "destructive"
  } | null>(null);

  // üìå Í∏∞Ï°¥ Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞ (idÍ∞Ä Ï°¥Ïû¨Ìï† Í≤ΩÏö∞)
  useEffect(() => {
    fetchRecord();
  }, [id]);

  const fetchRecord = async () => {
    try {
      if (id) {
        setIsEditing(true);
        const res = await axios.get(`${API_URL}/calendar/${id}`, {
          headers: {
            "Content-Type": "application/json",
          },
          withCredentials: true,
        });

        setMemo(res.data.memo || "");
        setSelectedTracks(res.data.musics || []);
      }
    } catch (error) {
      console.error("Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
      router.push("/calendar");
    }
  };

  // üìå Í∏∞Î°ù Ï†ÄÏû• (Ïã†Í∑ú or ÏàòÏ†ï)
  const handleSaveRecord = async () => {
    try {
      // üìå ÏùåÏïÖÏù¥ ÌïòÎÇòÎèÑ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÎã§Î©¥ ÏïåÎ¶º ÌëúÏãú
      if (selectedTracks.length === 0) {
        setAlertData({
          title: "Í∏∞Î°ù Ï†ÄÏû•",
          description: "ÏùåÏïÖ Í∏∞Î°ùÏùÑ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî",
          variant: "warning",
        });
        return;
      }

      // üìå Î©îÎ™®Í∞Ä ÎπÑÏñ¥ÏûàÎã§Î©¥ ÌôïÏù∏ ÏöîÏ≤≠
      if (!memo.trim()) {
        const confirmSave = window.confirm(
          "Î©îÎ™®Î•º ÏûëÏÑ±ÌïòÏßÄ ÏïäÏúºÏÖ®ÏäµÎãàÎã§. Í∑∏ÎåÄÎ°ú Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
        );
        if (!confirmSave) return;
      }

      let finalMemo = memo.trim() ? memo : null;

      await axios.post(`${API_URL}/music/save-all`, selectedTracks, {
        headers: {
          "Content-Type": "application/json",
        },
        withCredentials: true,
      });

      const musicIds = selectedTracks.map((track) => track.id);

      if (isEditing) {
        // Í∏∞Ï°¥ Í∏∞Î°ù ÏàòÏ†ï
        await axios.put(
          `${API_URL}/calendar/${id}/music`,
          { musicIds: musicIds },
          {
            headers: {
              "Content-Type": "application/json",
            },
            withCredentials: true,
          }
        );

        await axios.patch(
          `${API_URL}/calendar/${id}/memo`,
          { memo: finalMemo },
          {
            headers: {
              "Content-Type": "application/json",
            },
            withCredentials: true,
          }
        );

        alert("Í∏∞Î°ùÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!");
        router.push("/calendar");
      } else {
        // ÏÉà Í∏∞Î°ù Ï∂îÍ∞Ä
        await axios.post(
          `${API_URL}/calendar`,
          { memo: finalMemo, musicIds },
          {
            params: { year, month, day },
            headers: {
              "Content-Type": "application/json",
            },
            withCredentials: true,
          }
        );

        alert("ÏÉàÎ°úÏö¥ Í∏∞Î°ùÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!");
        router.push("/calendar");
      }
    } catch (error) {
      console.error("Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®:", error);
      setAlertData({
        title: "Í∏∞Î°ù Ï†ÄÏû•",
        description: "Í∏∞Î°ù Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù",
        variant: "destructive",
      });
    }
  };

  const handleSelectTrack = (track: any) => {
    setSelectedTracks((prev) => [...prev, track]);
  };

  const handleRemoveTrack = (trackId: any) => {
    setSelectedTracks((prev) => prev.filter((track) => track.id !== trackId));
  };

  return (
    <Card className="m-10 bg-white border-0 p-0">
      <div className="p-6">
        {alertData && (
          <AlertComponent
            title={alertData.title}
            description={alertData.description}
            variant={alertData.variant}
          />
        )}
        <div className="flex justify-between items-center mb-3">
          <h2 className="text-2xl font-bold">
            {isEditing ? "Í∏∞Î°ù ÏàòÏ†ï" : "Í∏∞Î°ù Ï∂îÍ∞Ä"}
          </h2>
          <button onClick={handleSaveRecord} className="btn btn-primary">
            ÏôÑÎ£å
          </button>
        </div>
        <div className="space-y-7">
          <MusicSearch onSelectTrack={handleSelectTrack} />
          <MusicList
            selectedTracks={selectedTracks}
            onRemoveTrack={handleRemoveTrack}
          />
          <MemoInput memo={memo} setMemo={setMemo} />
        </div>
      </div>
    </Card>
  );
}
